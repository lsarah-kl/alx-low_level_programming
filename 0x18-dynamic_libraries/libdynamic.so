#include "main.h"

/**
 * _putchar - Writes a character to stdout
 * @c: The character to write
 *
 * Return: if success, the character written, if failure, -1
 */
int _putchar(char c)
{
    return write(1, &c, 1);
}

/**
 * _islower - Checks for lowercase character
 * @c: The character to check
 *
 * Return: 1 if c is lowercase, else 0
 */
int _islower(int c)
{
    return (c >= 'a' && c <= 'z');
}

/**
 * _isalpha - Checks for alphabetic character
 * @c: The character to be checked
 *
 * Return: 1 if letter, else 0 
 */
int _isalpha(int c)
{
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}

/**
 * _abs - Computes the absolute value of an integer
 * @n: The integer to compute the absolute value of
 *
 * Return: The absolute value of n
 */
int _abs(int n)
{
    return (n < 0) ? -n : n;
}

/**
 * _isupper - Checks for uppercase character
 * @c: The character to be checked
 *
 * Return: 1 if c is uppercase, 0 otherwise
 */
int _isupper(int c)
{
    return (c >= 'A' && c <= 'Z');
}

/**
 * _isdigit - Checks for a digit (0 through 9)
 * @c: The character to be checked
 *
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
    return (c >= '0' && c <= '9');
}

/**
 * _strlen - Calculates the length of a string
 * @s: The input string
 *
 * Return: The length of the string
 */
int _strlen(char *s)
{
    int len = 0;

    while (s[len] != '\0')
        len++;

    return len;
}

/**
 * _puts - Prints a string to stdout
 * @s: The input string
 */
void _puts(char *s)
{
    while (*s != '\0')
    {
        _putchar(*s);
        s++;
    }
}

/**
 * _strcpy - Copies a string
 * @dest: The destination buffer
 * @src: The source string to copy
 *
 * Return: The pointer to the destination buffer
 */
char *_strcpy(char *dest, char *src)
{
    char *original_dest = dest;

    while (*src != '\0')
    {
        *dest = *src;
        dest++;
        src++;
    }
    *dest = '\0';

    return original_dest;
}

/**
 * _atoi - Converts a string to an integer
 * @s: The input string
 *
 * Return: The converted integer
 */
int _atoi(char *s)
{
    int result = 0;
    int sign = 1;

    if (*s == '-')
    {
        sign = -1;
        s++;
    }

    while (*s != '\0')
    {
        if (*s >= '0' && *s <= '9')
        {
            result = result * 10 + (*s - '0');
        }
        else
        {
            break;
        }
        s++;
    }

    return result * sign;
}

/**
 * _strcat - Concatenates two strings
 * @dest: The destination buffer
 * @src: The source string to append
 *
 * Return: The pointer to the destination buffer
 */
char *_strcat(char *dest, char *src)
{
    char *original_dest = dest;

    while (*dest != '\0')
        dest++;

    while (*src != '\0')
    {
        *dest = *src;
        dest++;
        src++;
    }

    *dest = '\0';

    return original_dest;
}

/**
 * _strncat - Concatenates two strings up to n bytes from src
 * @dest: The destination buffer
 * @src: The source string to append
 * @n: The maximum number of bytes to append
 *
 * Return: The pointer to the destination buffer
 */
char *_strncat(char *dest, char *src, int n)
{
    char *original_dest = dest;

    while (*dest != '\0')
        dest++;

    while (*src != '\0' && n > 0)
    {
        *dest = *src;
        dest++;
        src++;
        n--;
    }

    *dest = '\0';

    return original_dest;
}

/**
 * _strncpy - Copies a string up to n bytes from src
 * @dest: The destination buffer
 * @src: The source string to copy
 * @n: The maximum number of bytes to copy
 *
 * Return: The pointer to the destination buffer
 */
char *_strncpy(char *dest, char *src, int n)
{
    char *original_dest = dest;

    while (*src != '\0' && n > 0)
    {
        *dest = *src;
        dest++;
        src++;
        n--;
    }

    /* Fill the remaining characters with null bytes if n is not yet reached */
    while (n > 0)
    {
        *dest = '\0';
        dest++;
        n--;
    }

    return original_dest;
}

/**
 * _strcmp - Compares two strings
 * @s1: The first string to compare
 * @s2: The second string to compare
 *
 * Return: An integer less than, equal to, or greater than zero if s1 is found,
 * respectively, to be less than, to match, or be greater than s2
 */
int _strcmp(char *s1, char *s2)
{
    while (*s1 && (*s1 == *s2))
   
